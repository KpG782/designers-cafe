---
const categories = [
  {
    key: "coffee",
    name: "Coffee",
    color: "bg-[var(--coffee-900)] text-white",
    image: "/assets/peppermint.jpg",
    desc: "Classic espresso-based drinks and house blends for every coffee lover.",
    items: [
      { name: "Americano", price: 65, desc: "Smooth and bold espresso with hot water." },
      { name: "Cappuccino", price: 80, desc: "Espresso, steamed milk, and foam." },
      { name: "Dark Mocha", price: 105, desc: "Rich chocolate and espresso blend." },
      { name: "Designers Choice", price: 105, desc: "Our signature blend for creative minds." },
      { name: "Hazelnut Coffee", price: 105, desc: "Nutty, aromatic, and comforting." },
      { name: "Irish Cream", price: 105, desc: "Espresso with a creamy Irish twist." },
      { name: "Oat Latte 16oz ONLY", price: 115, desc: "Smooth oat milk with espresso." },
      { name: "Salted Caramel Macchiato", price: 105, desc: "Sweet, salty, and creamy layers." },
      { name: "Spanish Latte", price: 105, desc: "Espresso with sweetened milk." },
      { name: "Wild Peppermint Mocha", price: 135, desc: "Peppermint and chocolate fusion." }
    ]
  },
  {
    key: "frappuccino",
    name: "Frappés",
    color: "bg-[var(--pencil)] text-[var(--coffee-900)]",
    image: "/assets/peppermint.jpg",
    desc: "Icy, blended drinks in creative flavors for a refreshing treat.",
    items: [
      { name: "Chocolate Frappe", price: 140, desc: "Blended chocolate and espresso." },
      { name: "Dark Mocha Frappe", price: 140, desc: "Intense mocha, ice-blended." },
      { name: "Espresso Frappe", price: 140, desc: "Classic espresso, cool and creamy." },
      { name: "Irish Vanilla Frappe", price: 140, desc: "Vanilla and Irish cream fusion." },
      { name: "Matcha Frappe", price: 150, desc: "Japanese matcha, smooth and cold." },
      { name: "Salted Butterscotch Frappe", price: 140, desc: "Sweet, salty, and buttery." },
      { name: "Strawberry Frappe", price: 140, desc: "Fresh strawberry blended delight." },
      { name: "Wild Peppermint Mocha Frappe", price: 140, desc: "Peppermint, chocolate, and espresso." }
    ]
  },
  {
    key: "food",
    name: "Food",
    color: "bg-[var(--coffee-600)] text-white",
    image: "/assets/peppermint.jpg",
    desc: "Hearty meals, pasta, and snacks to pair with your favorite drink.",
    items: [
      { name: "Burger Steak", price: 110, desc: "Juicy patty with savory sauce." },
      { name: "Chicken Fillet", price: 110, desc: "Crispy chicken, perfect for lunch." },
      { name: "Fish Fry", price: 110, desc: "Golden fried fish fillet." },
      { name: "Bacon Carbonara Ala Carte", price: 100, desc: "Creamy pasta with bacon." },
      { name: "Creamy Tuna Pesto Ala Carte", price: 100, desc: "Tuna and pesto pasta." },
      { name: "Banana Bread Slice", price: 35, desc: "Moist, homemade banana bread." },
      { name: "Medium Croissant", price: 50, desc: "Flaky, buttery croissant." },
      { name: "Pan Au Chocolat", price: 80, desc: "Chocolate-filled pastry." },
      { name: "Cheese Sticks", price: 150, desc: "Crispy, cheesy snack." },
      { name: "Nachos With Beef Salsa", price: 150, desc: "Loaded nachos with beef salsa." },
      { name: "Potato Fries (Ketchup Dip)", price: 150, desc: "Classic fries with ketchup." }
    ]
  },
  {
    key: "noncoffee",
    name: "Non-Coffee",
    color: "bg-[#2563eb] text-white",
    image: "/assets/peppermint.jpg",
    desc: "Delicious drinks for non-coffee lovers and kids.",
    items: [
      { name: "Hot Choco", price: 85, desc: "Rich and creamy hot chocolate." },
      { name: "Iced Choco With Whip Cream 16oz Only", price: 115, desc: "Iced chocolate topped with whip." },
      { name: "Pink Pilates", price: 115, desc: "Fruity, pink, and refreshing." },
      { name: "Rebellious Drink", price: 115, desc: "Unique, creative, and fun." },
      { name: "Strawberry Latte With Whip Cream 16oz Only", price: 115, desc: "Strawberry and milk, whipped cream." },
      { name: "Unli Soda", price: 300, desc: "Unlimited soda for your group." }
    ]
  },
  {
    key: "add-ons",
    name: "Add Ons",
    color: "bg-[var(--cream)] text-[var(--coffee-900)] border border-[var(--coffee-200)]",
    image: "/assets/peppermint.jpg",
    desc: "Customize your order with extra shots, dips, and more.",
    items: [
      { name: "Espresso Shot", price: 20, desc: "Extra caffeine boost." },
      { name: "Extra Dip", price: 10, desc: "Add more flavor to your meal." },
      { name: "Extra Rice", price: 15, desc: "For a more filling meal." },
      { name: "Extra Whip", price: 20, desc: "More whipped cream, please!" },
      { name: "Shotts", price: 20, desc: "Extra flavor shots." },
      { name: "Soy Or Oat Milk", price: 30, desc: "Dairy-free milk options." },
      { name: "Takeouts", price: 10, desc: "For your takeout needs." },
      { name: "Upsize Coffee 22oz", price: 15, desc: "Bigger coffee, more energy." },
      { name: "Upsize SodaMilky 22oz", price: 15, desc: "Bigger soda milky." }
    ]
  },
  {
    key: "accessories",
    name: "Accessories",
    color: "bg-[var(--coffee-200)] text-[var(--coffee-900)]",
    image: "/assets/peppermint.jpg",
    desc: "Fun and creative accessories for your drinks and style.",
    items: [
      { name: "Bracelet", price: 60, desc: "Handmade, creative bracelet." },
      { name: "CP Charmer", price: 65, desc: "Cute phone charm." }
    ]
  }
];

let selectedCategory = categories[0].key;
---

<section class="py-20" style="background: var(--cream, #F8F4F0);" id="menu">
  <div class="absolute inset-0 opacity-5 pointer-events-none">
    <div class="grid grid-cols-8 gap-4 h-full">
      <div style="background: var(--pencil, #D4943A);"></div>
      <div style="background: var(--coffee-400, #D4943A);"></div>
      <div style="background: var(--pencil, #D4943A);"></div>
      <div style="background: var(--coffee-400, #D4943A);"></div>
      <div style="background: var(--pencil, #D4943A);"></div>
      <div style="background: var(--coffee-400, #D4943A);"></div>
      <div style="background: var(--pencil, #D4943A);"></div>
      <div style="background: var(--coffee-400, #D4943A);"></div>
    </div>
  </div>
  <div class="container mx-auto px-6 relative z-10">
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-serif font-bold mb-6" style="color: var(--coffee-900, #2E1C09); font-family: var(--font-serif);">
        Our <span style="color: var(--pencil);">Signature</span> Creations
      </h2>
      <p class="text-lg max-w-2xl mx-auto" style="color: var(--coffee-600, #8B4B1A); font-family: var(--font-sans);">
        Each drink is crafted with the precision of a designer and the passion of an artist. 
        Explore our curated collection of coffee perfection.
      </p>
    </div>
    <!-- Menu Categories -->
    <div class="flex flex-wrap justify-center gap-4 mb-12" id="menu-categories">
      {categories.map((cat, i) => (
        <button
          class={`category-btn px-6 py-3 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-[var(--pencil)] focus:ring-offset-2 ${selectedCategory === cat.key ? cat.color + " ring-2 ring-[var(--pencil)]" : "glass-morphism text-[var(--coffee-700)] hover:bg-[var(--pencil)] hover:text-white"}`}
          data-category={cat.key}
          type="button"
          style={`animation-delay: ${0.1 + i * 0.1}s; opacity:0;`}
        >
          {cat.name}
        </button>
      ))}
    </div>
    <!-- Category Description -->
    <div class="text-center mb-8">
      <p class="text-base md:text-lg font-medium transition-all duration-300 min-h-[1.5em]" id="category-description" style="color: var(--coffee-700, #6B3614); font-family: var(--font-sans);">
        {categories.find(cat => cat.key === selectedCategory)?.desc}
      </p>
    </div>
    <!-- Menu Items Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="menu-items">
      {categories.map(cat =>
        cat.items.map((item, idx) => (
          <div class={`menu-item menu-item-${cat.key} rounded-2xl p-6 shadow-lg transition-all duration-300 transform hover:-translate-y-2 hover:shadow-xl cursor-pointer`}
            style={`background: var(--coffee-50, #FDF7F0); border: 2px solid var(--coffee-200, #efcca5); display: ${cat.key === selectedCategory ? 'block' : 'none'}; opacity:0;`}
            data-item-name={item.name}
            data-item-price={item.price}
            data-item-desc={item.desc}
            data-item-image={cat.image}
            data-item-category={cat.name}
            onclick="openMenuModal(this)">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-xl font-bold" style="color: var(--coffee-900, #2E1C09); font-family: var(--font-serif);">{item.name}</h3>
              <span class="text-2xl font-bold" style="color: var(--pencil, #D4943A); font-family: var(--font-sans);">₱{item.price}</span>
            </div>
            <div class="mb-4 flex justify-center">
              <div class="w-24 h-24 rounded-full overflow-hidden shadow-inner border-4" style="border-color: var(--coffee-100, #F7E6D3); background: var(--cream, #F8F4F0); display: flex; align-items: center; justify-content: center;">
                <img src={cat.image} alt={item.name} class="w-20 h-20 object-cover rounded-full" />
              </div>
            </div>
            <p class="text-sm mb-4 text-center" style="color: var(--coffee-700, #6B3614); font-family: var(--font-sans);">{item.desc}</p>
            <div class="text-center">
              <button class="view-details-btn px-4 py-2 rounded-full text-sm font-medium transition-all duration-300"
                style="background: var(--pencil, #D4943A); color: white; border: none;">
                View Details
              </button>
            </div>
          </div>
        ))
      )}
    </div>

    <!-- Modal -->
    <div id="menu-modal" class="modal-overlay" style="display: none;">
      <div class="modal-content">
        <button class="modal-close" onclick="closeMenuModal()" aria-label="Close modal">
          <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
        
        <div class="modal-header">
          <div class="modal-image-container">
            <img id="modal-image" src="" alt="" class="modal-image" />
          </div>
          <div class="modal-title-section">
            <span id="modal-category" class="modal-category"></span>
            <h3 id="modal-title" class="modal-title"></h3>
            <p id="modal-price" class="modal-price"></p>
          </div>
        </div>
        
        <div class="modal-body">
          <p id="modal-description" class="modal-description"></p>
          
          <div class="modal-customization">
            <h4 class="customization-title">Customize Your Order</h4>
            <div class="quantity-selector">
              <label for="quantity">Quantity:</label>
              <div class="quantity-controls">
                <button type="button" onclick="decreaseQuantity()" class="quantity-btn">-</button>
                <input type="number" id="quantity" value="1" min="1" max="10" readonly>
                <button type="button" onclick="increaseQuantity()" class="quantity-btn">+</button>
              </div>
            </div>
            
            <div class="special-instructions">
              <label for="instructions">Special Instructions:</label>
              <textarea id="instructions" placeholder="Any special requests? (e.g., extra hot, less sugar, etc.)" rows="3"></textarea>
            </div>
          </div>
        </div>
        
        <div class="modal-footer">
          <div class="total-price">
            <span>Total: </span>
            <span id="modal-total" class="total-amount">₱0</span>
          </div>
          <div class="modal-actions">
            <button class="btn-secondary" onclick="closeMenuModal()">Cancel</button>
            <button class="btn-primary" onclick="addToOrder()">Add to Order</button>
          </div>
        </div>
      </div>
    </div>
    <!-- <div class="text-center mt-12">
      <button class="view-full-menu bg-transparent border-2 px-8 py-4 rounded-full font-semibold hover:bg-[var(--pencil)] hover:text-white transition-all duration-300 transform hover:scale-105"
        style="border-color: var(--pencil, #D4943A); color: var(--pencil, #D4943A); font-family: var(--font-sans);">
        View Full Menu
      </button>
    </div> -->
  </div>
</section>

<style>
  @keyframes fade-in-up {
    from { opacity: 0; transform: translateY(32px);}
    to { opacity: 1; transform: translateY(0);}
  }
  @keyframes fade-in {
    from { opacity: 0; transform: translateY(24px);}
    to { opacity: 1; transform: translateY(0);}
  }
  .animate-fade-in-up {
    animation: fade-in-up 0.7s cubic-bezier(.4,0,.2,1) both;
  }
  .animate-fade-in {
    animation: fade-in 0.7s cubic-bezier(.4,0,.2,1) both;
  }
  .glass-morphism {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  /* Modal Styles */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
    backdrop-filter: blur(5px);
  }

  .modal-content {
    background: linear-gradient(135deg, #FFFFFF 0%, #F8F4F0 100%);
    border-radius: 20px;
    max-width: 600px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
    border: 3px solid var(--pencil, #D4943A);
  }

  .modal-close {
    position: absolute;
    top: 15px;
    right: 15px;
    background: rgba(212, 148, 58, 0.1);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: var(--coffee-900);
    transition: all 0.3s ease;
    z-index: 10;
  }

  .modal-close:hover {
    background: var(--pencil);
    color: white;
    transform: scale(1.1);
  }

  .modal-header {
    display: flex;
    gap: 20px;
    padding: 30px 30px 20px;
    align-items: center;
  }

  .modal-image-container {
    flex-shrink: 0;
  }

  .modal-image {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    object-fit: cover;
    border: 4px solid var(--pencil);
    box-shadow: 0 8px 20px rgba(212, 148, 58, 0.3);
  }

  .modal-title-section {
    flex: 1;
  }

  .modal-category {
    display: inline-block;
    background: rgba(212, 148, 58, 0.15);
    color: #B8811A;
    padding: 4px 12px;
    border-radius: 15px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: 8px;
  }

  .modal-title {
    font-size: 1.8rem;
    font-weight: bold;
    color: var(--coffee-900);
    margin: 8px 0;
    font-family: Georgia, serif;
  }

  .modal-price {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--pencil);
    font-family: Arial, sans-serif;
  }

  .modal-body {
    padding: 0 30px 20px;
  }

  .modal-description {
    font-size: 1rem;
    color: var(--coffee-700);
    line-height: 1.6;
    margin-bottom: 24px;
    font-family: Arial, sans-serif;
  }

  .modal-customization {
    background: rgba(212, 148, 58, 0.05);
    border-radius: 12px;
    padding: 20px;
    border: 1px solid rgba(212, 148, 58, 0.2);
  }

  .customization-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--coffee-900);
    margin-bottom: 16px;
    font-family: Georgia, serif;
  }

  .quantity-selector {
    margin-bottom: 20px;
  }

  .quantity-selector label {
    display: block;
    font-weight: 600;
    color: var(--coffee-800);
    margin-bottom: 8px;
  }

  .quantity-controls {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .quantity-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 2px solid var(--pencil);
    background: white;
    color: var(--pencil);
    font-size: 1.2rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .quantity-btn:hover {
    background: var(--pencil);
    color: white;
    transform: scale(1.1);
  }

  #quantity {
    width: 60px;
    text-align: center;
    border: 2px solid rgba(212, 148, 58, 0.3);
    border-radius: 8px;
    padding: 8px;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--coffee-900);
  }

  .special-instructions label {
    display: block;
    font-weight: 600;
    color: var(--coffee-800);
    margin-bottom: 8px;
  }

  .special-instructions textarea {
    width: 100%;
    border: 2px solid rgba(212, 148, 58, 0.3);
    border-radius: 8px;
    padding: 12px;
    font-family: Arial, sans-serif;
    resize: vertical;
    transition: border-color 0.3s ease;
  }

  .special-instructions textarea:focus {
    outline: none;
    border-color: var(--pencil);
  }

  .modal-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 30px 30px;
    border-top: 1px solid rgba(212, 148, 58, 0.2);
    margin-top: 20px;
  }

  .total-price {
    font-size: 1.3rem;
    font-weight: 600;
    color: var(--coffee-900);
  }

  .total-amount {
    color: var(--pencil);
    font-weight: bold;
    font-size: 1.5rem;
  }

  .modal-actions {
    display: flex;
    gap: 12px;
  }

  .btn-primary, .btn-secondary {
    padding: 12px 24px;
    border-radius: 25px;
    font-weight: 600;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.95rem;
  }

  .btn-primary {
    background: var(--pencil);
    color: white;
  }

  .btn-primary:hover {
    background: #B8811A;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(212, 148, 58, 0.3);
  }

  .btn-secondary {
    background: rgba(212, 148, 58, 0.1);
    color: var(--coffee-900);
    border: 2px solid rgba(212, 148, 58, 0.3);
  }

  .btn-secondary:hover {
    background: rgba(212, 148, 58, 0.2);
    transform: translateY(-2px);
  }

  /* Responsive Modal */
  @media (max-width: 768px) {
    .modal-content {
      margin: 10px;
      max-height: 95vh;
    }
    
    .modal-header {
      flex-direction: column;
      text-align: center;
      padding: 20px 20px 15px;
    }
    
    .modal-image {
      width: 100px;
      height: 100px;
    }
    
    .modal-title {
      font-size: 1.5rem;
    }
    
    .modal-body {
      padding: 0 20px 15px;
    }
    
    .modal-footer {
      flex-direction: column;
      gap: 16px;
      padding: 15px 20px 20px;
    }
    
    .modal-actions {
      width: 100%;
      justify-content: center;
    }
    
    .btn-primary, .btn-secondary {
      padding: 14px 28px;
    }
  }
</style>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const menuSection = document.getElementById('menu');
    const categoryButtons = document.querySelectorAll('.category-btn');
    const menuItems = document.querySelectorAll('.menu-item');
    const categoryDescription = document.getElementById('category-description');
    let currentCategory = 'coffee';
    let animated = false;

    const categories = [
      {
        key: "coffee",
        name: "Coffee",
        color: "bg-[var(--coffee-900)] text-white",
        desc: "Classic espresso-based drinks and house blends for every coffee lover."
      },
      {
        key: "frappuccino",
        name: "Frappés",
        color: "bg-[var(--pencil)] text-[var(--coffee-900)]",
        desc: "Icy, blended drinks in creative flavors for a refreshing treat."
      },
      {
        key: "food",
        name: "Food",
        color: "bg-[var(--coffee-600)] text-white",
        desc: "Hearty meals, pasta, and snacks to pair with your favorite drink."
      },
      {
        key: "noncoffee",
        name: "Non-Coffee",
        color: "bg-[#2563eb] text-white",
        desc: "Delicious drinks for non-coffee lovers and kids."
      },
      {
        key: "add-ons",
        name: "Add Ons",
        color: "bg-[var(--cream)] text-[var(--coffee-900)] border border-[var(--coffee-200)]",
        desc: "Customize your order with extra shots, dips, and more."
      },
      {
        key: "accessories",
        name: "Accessories",
        color: "bg-[var(--coffee-200)] text-[var(--coffee-900)]",
        desc: "Fun and creative accessories for your drinks and style."
      }
    ];

    function showCategory(category: string) {
      // Hide all items
      menuItems.forEach(item => {
        (item as HTMLElement).style.display = 'none';
        (item as HTMLElement).style.opacity = '0';
      });

      // Show items for selected category with stagger animation
      const categoryItems = document.querySelectorAll(`.menu-item-${category}`);
      categoryItems.forEach((item, index) => {
        setTimeout(() => {
          (item as HTMLElement).style.display = 'block';
          setTimeout(() => {
            (item as HTMLElement).style.opacity = '1';
            item.classList.add('animate-fade-in-up');
          }, 50);
        }, index * 100);
      });

      // Update category description
      const categoryData = categories.find(cat => cat.key === category);
      if (categoryData && categoryDescription) {
        categoryDescription.textContent = categoryData.desc;
      }

      // Update button states
      categoryButtons.forEach(btn => {
        const btnCategory = btn.getAttribute('data-category');
        if (btnCategory === category && categoryData) {
          btn.className = `category-btn px-6 py-3 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-[var(--pencil)] focus:ring-offset-2 ${categoryData.color} ring-2 ring-[var(--pencil)]`;
        } else {
          btn.className = `category-btn px-6 py-3 rounded-full font-medium transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-[var(--pencil)] focus:ring-offset-2 glass-morphism text-[var(--coffee-700)] hover:bg-[var(--pencil)] hover:text-white`;
        }
      });
    }

    function animateMenu() {
      if (animated) return;
      
      // Animate category buttons
      categoryButtons.forEach((btn, i) => {
        setTimeout(() => {
          (btn as HTMLElement).style.opacity = '1';
          btn.classList.add('animate-fade-in');
        }, i * 100);
      });

      // Show initial category items
      setTimeout(() => {
        showCategory(currentCategory);
      }, 500);

      animated = true;
    }

    function handleIntersect(entries: IntersectionObserverEntry[], observer: IntersectionObserver) {
      entries.forEach((entry: IntersectionObserverEntry) => {
        if (entry.isIntersecting) {
          animateMenu();
          observer.disconnect();
        }
      });
    }

    // Intersection observer for scroll-triggered animation
    if (menuSection) {
      const observer = new window.IntersectionObserver(handleIntersect, {
        threshold: 0.2
      });
      observer.observe(menuSection);
    }

    // Category button click handlers
    categoryButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const category = button.getAttribute('data-category');
        if (category && category !== currentCategory) {
          currentCategory = category;
          showCategory(category);
        }
      });
    });

    // Modal functionality
    let currentItemPrice = 0;

    (window as any).openMenuModal = function(element: HTMLElement) {
      const itemName = element.getAttribute('data-item-name');
      const itemPrice = element.getAttribute('data-item-price');
      const itemDesc = element.getAttribute('data-item-desc');
      const itemImage = element.getAttribute('data-item-image');
      const itemCategory = element.getAttribute('data-item-category');

      if (itemName && itemPrice && itemDesc && itemImage && itemCategory) {
        currentItemPrice = parseInt(itemPrice);

        // Update modal content
        const modal = document.getElementById('menu-modal');
        const modalImage = document.getElementById('modal-image') as HTMLImageElement;
        const modalCategory = document.getElementById('modal-category');
        const modalTitle = document.getElementById('modal-title');
        const modalPrice = document.getElementById('modal-price');
        const modalDescription = document.getElementById('modal-description');
        const quantityInput = document.getElementById('quantity') as HTMLInputElement;
        const instructionsTextarea = document.getElementById('instructions') as HTMLTextAreaElement;

        if (modal && modalImage && modalCategory && modalTitle && modalPrice && modalDescription && quantityInput && instructionsTextarea) {
          modalImage.src = itemImage;
          modalImage.alt = itemName;
          modalCategory.textContent = itemCategory;
          modalTitle.textContent = itemName;
          modalPrice.textContent = `₱${itemPrice}`;
          modalDescription.textContent = itemDesc;
          quantityInput.value = '1';
          instructionsTextarea.value = '';

          updateTotal();
          modal.style.display = 'flex';
          document.body.style.overflow = 'hidden';
        }
      }
    };

    (window as any).closeMenuModal = function() {
      const modal = document.getElementById('menu-modal');
      if (modal) {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
      }
    };

    (window as any).increaseQuantity = function() {
      const quantityInput = document.getElementById('quantity') as HTMLInputElement;
      if (quantityInput) {
        const currentValue = parseInt(quantityInput.value);
        if (currentValue < 10) {
          quantityInput.value = (currentValue + 1).toString();
          updateTotal();
        }
      }
    };

    (window as any).decreaseQuantity = function() {
      const quantityInput = document.getElementById('quantity') as HTMLInputElement;
      if (quantityInput) {
        const currentValue = parseInt(quantityInput.value);
        if (currentValue > 1) {
          quantityInput.value = (currentValue - 1).toString();
          updateTotal();
        }
      }
    };

    function updateTotal() {
      const quantityInput = document.getElementById('quantity') as HTMLInputElement;
      const totalElement = document.getElementById('modal-total');
      
      if (quantityInput && totalElement) {
        const quantity = parseInt(quantityInput.value);
        const total = currentItemPrice * quantity;
        totalElement.textContent = `₱${total}`;
      }
    }

    (window as any).addToOrder = function() {
      const itemName = document.getElementById('modal-title')?.textContent;
      const quantity = (document.getElementById('quantity') as HTMLInputElement)?.value;
      const instructions = (document.getElementById('instructions') as HTMLTextAreaElement)?.value;
      const total = document.getElementById('modal-total')?.textContent;

      // Here you can implement the actual order functionality
      // For now, we'll show an alert
      let orderSummary = `Added to order:\n${itemName} x${quantity}\nTotal: ${total}`;
      if (instructions) {
        orderSummary += `\nSpecial Instructions: ${instructions}`;
      }
      
      alert(orderSummary);
      
      // Close modal
      (window as any).closeMenuModal();
    };

    // Close modal when clicking outside
    document.addEventListener('click', (e) => {
      const modal = document.getElementById('menu-modal');
      if (modal && e.target === modal) {
        (window as any).closeMenuModal();
      }
    });

    // Close modal with escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        (window as any).closeMenuModal();
      }
    });
  });
</script>
