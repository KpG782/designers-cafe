---
const bgImage = "/assets/midnightbg.jpg"; // adjust path if needed
---

<section
  class="min-h-screen flex items-center justify-center relative overflow-hidden pt-20"
  id="hero"
  aria-label="Designers' Cafe Hero Section"
  style={`background: url('${bgImage}') center center / cover no-repeat; background-color: var(--coffee-900, #2E1C09);`}
>
  <!-- Background overlay for contrast -->
  <div class="absolute inset-0 z-0 opacity-10" style="background: linear-gradient(180deg, rgba(46,28,9,0.35) 0%, rgba(46,28,9,0.25) 100%);"></div>

  <!-- Animated floating shapes -->
  <div class="absolute inset-0 opacity-10 z-10 pointer-events-none">
    <div class="floating-shape floating-shape-1" style="background: var(--pencil, #D4943A);"></div>
    <div class="floating-shape floating-shape-2" style="background: var(--coffee-400, #D4943A);"></div>
    <div class="floating-shape floating-shape-3" style="background: var(--coffee-600, #8B4B1A);"></div>
    <!-- Unique animated gradient ring -->
    <div class="rotating-ring" style="border-color: var(--pencil, #D4943A);"></div>
  </div>
  
  <div class="container mx-auto px-6 text-center relative z-20">
    <div class="max-w-4xl mx-auto">
      <!-- Animated tagline -->
      <p class="font-medium mb-4 hero-element" id="tagline" style="color: var(--cream, #F8F4F0); font-family: var(--font-sans); opacity:0;">
        Where creativity meets caffeine
      </p>
      
      <!-- Main heading with split text animation -->
      <h1 class="text-5xl md:text-7xl font-serif font-bold mb-6 drop-shadow-lg hero-element" style="color: var(--cream, #F8F4F0); font-family: var(--font-serif); opacity:0;">
        <span class="block hero-text" id="hero-text-1" style="color: var(--coffee-50, #FDF7F0);">Brewing</span>
        <span class="block hero-text" id="hero-text-2" style="color: var(--pencil, #D4943A);">Connections</span>
        <span class="block text-sm md:text-lg font-sans font-normal mt-4 hero-element" id="hero-text-3" style="color: var(--cream, #F8F4F0); font-family: var(--font-sans);">One cup at a time</span>
      </h1>
      
      <p class="text-lg md:text-xl max-w-2xl mx-auto mb-8 drop-shadow hero-element" id="hero-description" style="color: var(--cream, #F8F4F0); font-family: var(--font-sans); opacity:0;">
        Experience the perfect blend of creativity and coffee at Designers' Cafe. 
        Where every sip fuels inspiration and every moment sparks connections.
      </p>
      
      <!-- CTA Buttons with stagger animation -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center hero-element" id="hero-buttons" style="opacity:0;">
        <button class="cta-primary px-8 py-4 rounded-full font-semibold hover:bg-[var(--coffee-600)] transition-all duration-300 transform hover:scale-105 pulse-glow focus:outline-none focus:ring-4 focus:ring-[var(--pencil)] focus:ring-opacity-50"
          style="background: var(--pencil, #D4943A); color: var(--cream, #F8F4F0); font-family: var(--font-sans);"
          aria-label="Explore our menu and specialty drinks">
          Explore Menu
        </button>
        <button class="cta-secondary border-2 px-8 py-4 rounded-full font-semibold hover:bg-[var(--pencil)] hover:text-white transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-[var(--pencil)] focus:ring-opacity-50"
          style="border-color: var(--pencil, #D4943A); color: var(--pencil, #D4943A); font-family: var(--font-sans);"
          aria-label="Visit Designers' Cafe location in Taguig">
          Visit Us Today
        </button>
      </div>
      
      <!-- Hours indicator -->
      <div class="mt-12 hero-element" id="hours-indicator" style="opacity:0;">
        <div class="inline-flex items-center glass-morphism px-6 py-3 rounded-full" style="background: rgba(255,255,255,0.08);">
          <div class="w-3 h-3 bg-green-500 rounded-full mr-3 animate-pulse"></div>
          <span class="font-medium" style="color: var(--cream, #F8F4F0); font-family: var(--font-sans);">Open Today: 3:00 PM - 11:00 PM</span>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Scroll indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-20 hero-element" id="scroll-indicator" style="opacity:0;">
    <div class="flex flex-col items-center">
      <span class="text-white text-sm mb-2 drop-shadow" style="font-family: var(--font-sans);">Scroll to explore</span>
      <div class="w-6 h-10 border-2 rounded-full flex justify-center scroll-indicator" style="border-color: var(--coffee-400, #D4943A);">
        <div class="w-1 h-3 rounded-full mt-2 scroll-dot" style="background: var(--coffee-400, #D4943A);"></div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Floating shapes animations */
  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    33% { transform: translateY(-20px) rotate(120deg); }
    66% { transform: translateY(10px) rotate(240deg); }
  }
  
  @keyframes rotate {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  @keyframes fadeInUp {
    from { 
      opacity: 0; 
      transform: translateY(50px); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0); 
    }
  }
  
  @keyframes slideInLeft {
    from { 
      opacity: 0; 
      transform: translateX(-80px); 
    }
    to { 
      opacity: 1; 
      transform: translateX(0); 
    }
  }
  
  @keyframes slideInRight {
    from { 
      opacity: 0; 
      transform: translateX(80px); 
    }
    to { 
      opacity: 1; 
      transform: translateX(0); 
    }
  }
  
  @keyframes pulseGlow {
    0%, 100% { 
      box-shadow: 0 0 0 0 rgba(212,148,58,0.7); 
    }
    50% { 
      box-shadow: 0 0 24px 8px rgba(212,148,58,0.2); 
    }
  }
  
  @keyframes scrollBounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(8px); }
  }
  
  /* Floating shapes */
  .floating-shape {
    position: absolute;
    border-radius: 50%;
    animation: float 8s ease-in-out infinite;
  }
  
  .floating-shape-1 {
    top: 20%;
    left: 10%;
    width: 80px;
    height: 80px;
    animation-delay: 0s;
  }
  
  .floating-shape-2 {
    bottom: 30%;
    right: 15%;
    width: 60px;
    height: 60px;
    animation-delay: 3s;
  }
  
  .floating-shape-3 {
    top: 50%;
    left: 20%;
    width: 40px;
    height: 40px;
    animation-delay: 6s;
  }
  
  .rotating-ring {
    position: absolute;
    top: 30%;
    right: 25%;
    width: 120px;
    height: 120px;
    border: 4px solid;
    border-radius: 50%;
    animation: rotate 15s linear infinite;
    background: linear-gradient(45deg, transparent, var(--pencil), transparent);
  }
  
  /* Hero elements animations */
  .hero-element {
    animation: fadeInUp 1s cubic-bezier(.4,0,.2,1) forwards;
  }
  
  .hero-text {
    animation: slideInLeft 1s cubic-bezier(.4,0,.2,1) forwards;
  }
  
  #hero-text-1 {
    animation-delay: 0.3s;
  }
  
  #hero-text-2 {
    animation: slideInRight 1s cubic-bezier(.4,0,.2,1) forwards;
    animation-delay: 0.5s;
  }
  
  #tagline {
    animation-delay: 0.1s;
  }
  
  #hero-text-3 {
    animation-delay: 0.7s;
  }
  
  #hero-description {
    animation-delay: 0.9s;
  }
  
  #hero-buttons {
    animation-delay: 1.1s;
  }
  
  #hours-indicator {
    animation-delay: 1.3s;
  }
  
  #scroll-indicator {
    animation-delay: 1.5s;
  }
  
  /* Button effects */
  .pulse-glow {
    animation: pulseGlow 3s infinite;
  }
  
  /* Scroll indicator */
  .scroll-dot {
    animation: scrollBounce 2s infinite;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .floating-shape-1 { width: 60px; height: 60px; }
    .floating-shape-2 { width: 45px; height: 45px; }
    .floating-shape-3 { width: 30px; height: 30px; }
    .rotating-ring { width: 80px; height: 80px; }
  }
</style>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const heroSection = document.getElementById('hero');
    const heroElements = heroSection?.querySelectorAll('.hero-element, .hero-text');
    let animated = false;

    function animateHero() {
      if (animated || !heroElements) return;
      
      heroElements.forEach((element, i) => {
        setTimeout(() => {
          element.style.opacity = '1';
          element.classList.add('animate');
        }, i * 100);
      });
      
      animated = true;
    }

    function handleIntersect(entries, observer) {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          animateHero();
          observer.disconnect();
        }
      });
    }

    if (heroSection) {
      const observer = new window.IntersectionObserver(handleIntersect, {
        threshold: 0.3
      });
      observer.observe(heroSection);
    }
  });
</script>